buildscript {
    ext {
        springBootVersion = '2.0.0.M5'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: "idea"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.monstar'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    mybatisGenerator
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1")
    compile("mysql:mysql-connector-java")
    compile("org.springframework.boot:spring-boot-starter-data-redis")
    compile("org.springframework.session:spring-session-data-redis")
    compile("org.springframework.boot:spring-boot-autoconfigure")
    compile("org.springframework.boot:spring-boot-configuration-processor")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    // 尝试官方推荐的热加载工具
    compile("org.springframework.boot:spring-boot-devtools")
    compile("com.alibaba:fastjson:1.2.40")
    compile("joda-time:joda-time:2.9.9")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.flywaydb:flyway-core")

//    compile("org.apache.httpcomponents:httpclient:4.4") {
//        exclude(module: "commons-logging")
//    }

//    compile files("lib/alipay-sdk-java-20170615.jar")
//    compile files("lib/commons-logging-1.1.1.jar")
//    compile files("lib/oss-post-policy-server.jar")
//    compile files("lib/wxpay-sdk-0.0.3.jar")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.boot:spring-boot-test-autoconfigure")
    testCompile("org.springframework.security:spring-security-test")

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
    mybatisGenerator 'tk.mybatis:mapper:3.4.4'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
        testOutputDir = file("$buildDir/classes/test/")
    }
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/db-generate.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.user")
    ant.properties['password'] = properties.getProperty("jdbc.pass")
    ant.properties['modelPackage'] = properties.getProperty("modelPackage")
    ant.properties['mapperPackage'] = properties.getProperty("mapperPackage")
    ant.properties['sqlMapperPackage'] = properties.getProperty("sqlMapperPackage")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')

            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}

task copyConf {
    doFirst {
        def p = "local"
        if (project.hasProperty("profile")) {
            p = "${profile}"
        }
        copy {
            from('conf/' + p) {
                include '*.yml'
                include '*.properties'
                include 'messages/'
            }
            into('build/resources/main')
        }
        copy {
            from('conf/' + p) {
                include '*.yml'
                include '*.properties'
                include 'messages/'
            }
            into('build/resources/test')
        }
    }
}

gradle.projectsEvaluated {
    classes.dependsOn(copyConf)
}
